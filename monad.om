type def Maybe = ^A:*{
  ${ bind_maybe : @B:*{(A->B)->B->B} }
};
type def Monad = ^M:*->*{
  ${ fmap : @A:*{@B:*{(A->B)->M(A)->M(B)}}
  ,  pure : @A:*{A->M(A)}
  ,  join : @A:*{M(M(A))->M(A)}
  }
};
def just = ~A:*{
  ^x:A{
    ${ bind_maybe = ~B:*{^f:A->B{^g:B{f(x)}}} }
  }
};
def nothing = ~A:*{
  ${ bind_maybe = ~B:*{^f:A->B{^g:B{g}}} }
};
def maybe_monad = ${
  fmap = ~A:*{~B:*{
    ^f:A->B{^m:Maybe(A){
      m.bind_maybe[Maybe(B)]
        (^x:A{just[B](f(x))})
        (nothing[B])
    }}
  }},
  pure = just,
  join = ~A:*{
    ^m:Maybe(Maybe(A)){
      m.bind_maybe[Maybe(A)]
        (^x:Maybe(A){x})
        (nothing[A])
    }
  }
};
def bind = ~M:*->*{~A:*{~B:*{
  ^monad:Monad(M){^m:M(A){^f:A->M(B){
    monad.join[B](monad.fmap[A][M(B)](f)(m))
  }}}
}}};
